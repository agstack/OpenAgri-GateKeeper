# Generated by Django 5.1.3 on 2025-01-09 16:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='RegisteredService',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.AutoField(db_column='id', db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('base_url', models.CharField(default='http://127.0.0.1:8001', max_length=255)),
                ('service_name', models.CharField(max_length=100)),
                ('endpoint', models.CharField(max_length=255)),
                ('methods', models.JSONField()),
                ('params', models.TextField(blank=True, help_text="Query parameter templates (e.g., 'lat={}&lon={}').", max_length=100, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('service_url', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'Registered Service',
                'verbose_name_plural': 'Registered Services',
                'db_table': 'registered_services',
            },
        ),
        migrations.CreateModel(
            name='DefaultAuthUserExtend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('contact_no', models.CharField(blank=True, db_index=True, default='', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number', regex='^[0-9- ]+$')])),
                ('token_version', models.IntegerField(default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User Master',
                'verbose_name_plural': 'User Masters',
                'db_table': 'auth_user_extend',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdminMenuMaster',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.SmallAutoField(db_column='id', db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('menu_name', models.CharField(max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9()\\s]+$')])),
                ('menu_icon', models.CharField(blank=True, default='list', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-z0-9-]+$')])),
                ('menu_route', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('menu_access', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('menu_order', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[0-9]+$')])),
                ('parent_id', models.ForeignKey(blank=True, db_column='parent_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submenus', to='aegis.adminmenumaster')),
            ],
            options={
                'verbose_name': 'Admin Menu',
                'verbose_name_plural': 'Admin Menus',
                'db_table': 'admin_menu_master',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAdminMenuMaster',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('id', models.IntegerField(blank=True, db_column='id', db_index=True, editable=False, verbose_name='ID')),
                ('menu_name', models.CharField(db_index=True, max_length=30, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9()\\s]+$')])),
                ('menu_icon', models.CharField(blank=True, default='list', max_length=20, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-z0-9-]+$')])),
                ('menu_route', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('menu_access', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[a-zA-Z0-9\\s-]+$')])),
                ('menu_order', models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Invalid characters', regex='^[0-9]+$')])),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_id', models.ForeignKey(blank=True, db_column='parent_id', db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='aegis.adminmenumaster')),
            ],
            options={
                'verbose_name': 'historical Admin Menu',
                'verbose_name_plural': 'historical Admin Menus',
                'db_table': 'admin_menu_master_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDefaultAuthUserExtend',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('contact_no', models.CharField(blank=True, db_index=True, default='', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Invalid phone number', regex='^[0-9- ]+$')])),
                ('token_version', models.IntegerField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical User Master',
                'verbose_name_plural': 'historical User Masters',
                'db_table': 'auth_user_extend_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRegisteredService',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Updated At')),
                ('id', models.IntegerField(blank=True, db_column='id', db_index=True, editable=False, verbose_name='ID')),
                ('base_url', models.CharField(default='http://127.0.0.1:8001', max_length=255)),
                ('service_name', models.CharField(max_length=100)),
                ('endpoint', models.CharField(max_length=255)),
                ('methods', models.JSONField()),
                ('params', models.TextField(blank=True, help_text="Query parameter templates (e.g., 'lat={}&lon={}').", max_length=100, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('service_url', models.CharField(blank=True, max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Registered Service',
                'verbose_name_plural': 'historical Registered Services',
                'db_table': 'registered_services_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PermissionMaster',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.AutoField(db_column='id', db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('action', models.CharField(choices=[('add', 'add'), ('edit', 'edit'), ('view', 'view'), ('delete', 'delete')], max_length=20)),
                ('is_virtual', models.BooleanField(default=False)),
                ('menu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aegis.adminmenumaster')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'db_table': 'permission_master',
                'unique_together': {('menu', 'action')},
            },
        ),
        migrations.CreateModel(
            name='GroupCustomPermissions',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.AutoField(db_column='id', db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('permission_names', models.ManyToManyField(to='aegis.permissionmaster')),
            ],
            options={
                'verbose_name': 'Group Custom Permission',
                'verbose_name_plural': 'Group Custom Permissions',
                'db_table': 'custom_group_permissions',
            },
        ),
        migrations.CreateModel(
            name='RequestLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.CharField(max_length=45)),
                ('user_agent', models.TextField()),
                ('path', models.CharField(max_length=200)),
                ('query_string', models.TextField()),
                ('body', models.TextField()),
                ('method', models.CharField(max_length=10)),
                ('response_status', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'db_table': 'activity_log',
            },
        ),
        migrations.CreateModel(
            name='CustomPermissions',
            fields=[
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('id', models.AutoField(db_column='id', db_index=True, editable=False, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('permission_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aegis.permissionmaster')),
            ],
            options={
                'verbose_name': 'Custom Permission',
                'verbose_name_plural': 'Custom Permissions',
                'db_table': 'custom_permissions',
                'unique_together': {('user', 'permission_name')},
            },
        ),
    ]
